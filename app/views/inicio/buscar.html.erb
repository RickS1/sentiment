<% if false %>
<style>
.tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
}

.zoom {
  cursor: move;
  fill: none;
  pointer-events: all;
}
</style>

<script src="https://d3js.org/d3.v4.min.js"></script>
<%= include_gon  %>
<script type="text/javascript">

//Cargamos los datos
d3.csv('http://200.12.162.229:81/usr_stats_Ayotzinapa.csv',function(data){
	data.forEach(function(d){d['followers'] = +d['followers']; d['following'] = +d['following'];});

	var width = 800;
	var height = 800;
	var margen = 50;
	var max_followers = d3.max(data, function(d){return d["followers"]});
	var max_following = d3.max(data, function(d){return d["following"]});

	var svg = d3.select("body").append("svg")
						.attr("width", width)
						.attr("height", height);

  var x = d3.scaleLinear()
					.domain(d3.extent(data, function(d){return d['following']}))
					.range([margen, width - margen]);

	var y = d3.scaleLinear()
					.domain(d3.extent(data, function(d){return d['following']}))
					.range([height - margen, margen]);

	var color = d3.scaleLinear()
					.domain([0,1,2,3,4])
					.range(["#ff0000","#0000ff","#00ff00","#ffff00","#ff00ff"])

	var ejeX = d3.axisBottom(x)
							.ticks(8);

	var ejeY = d3.axisLeft(y)
							.ticks(8);
							//.tickFormat(function(d){return d/100000});

	var r = 3;

	var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

	var transform = d3.zoomIdentity;

	var ax = svg.append("g")
			.attr("class", "eje-x")
			.attr("transform", "translate(0," + (height- margen) + ")")
			.call(ejeX);
			
	var textx = svg.append("text")
			.attr("class", "label")
			.attr("x", width/2)
			.attr("y", height - (margen/2))
			.attr("text-anchor", "middle")
			.text("Seguidores");

	var ay = svg.append("g")
			.attr("class", "eje-y")
			.attr("transform", "translate(" + margen + ", 0)")
			.call(ejeY);	
		
	var texty = svg.append("text")
			.attr("class", "label")
			.attr("x", -(height /2))
			.attr("y", (margen/2))
			.attr("transform", "rotate(-90)")
			.attr("text-anchor", "middle")
			.text("Siguiendo");

	var g = svg.append("g");	

	var zoom = d3.zoom()
    .scaleExtent([1, 10000])
    .translateExtent([[0, 0], [width - margen, height - margen]])
    .extent([[0, 0], [width - margen, height - margen]])
    .on("zoom", zoomed);

	var points = g.selectAll(".punto")
			.data(data)
			.enter().append("circle")
			.attr("class", "punto")
			.attr("r",r)
			.attr("cx", function(d){ return x(d["followers"])})
			.attr("cy", function(d){ return y(d["following"])})
			.attr("stroke", "#dddddd")
			.attr("stroke-width", 1)
			.attr("fill", function(d){ 
				var ratio = (d["following"] > 0 ? d["followers"]/d["following"] : d["followers"]);
				ratio = (ratio <= 0.25 ? 0 : (ratio <= 0.5 ? 1 : ( ratio <= 2 ? 2 : ( ratio <= 4 ? 3 : 4))))
				return color(ratio);
			})
			.on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d["id"] + "<br/> (" + d["followers"] 
	        + ", " + d["following"] + ")")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

	svg.call(zoom);


	function zoomed() {
		ax.call(ejeX.scale(d3.event.transform.rescaleX(x)));
		ay.call(ejeY.scale(d3.event.transform.rescaleY(y)));
		d3.selectAll(".punto").attr("transform",d3.event.transform)
			.attr("r", r/d3.event.transform.k)
			.attr("stroke-width",1/d3.event.transform.k);
	}

});

</script>
<% end %>

<style>

.axis path {
  display: none;
}

.axis line {
  stroke-opacity: 0.3;
  shape-rendering: crispEdges;
}

.view {
  fill: url(#gradient);
  stroke: #000;
}

button {
  position: absolute;
  top: 20px;
  left: 20px;
}

</style>
<button>Reset</button>
<svg width="960" height="500">
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop   offset="0.0%" stop-color="#2c7bb6"></stop>
      <stop  offset="12.5%" stop-color="#00a6ca"></stop>
      <stop  offset="25.0%" stop-color="#00ccbc"></stop>
      <stop  offset="37.5%" stop-color="#90eb9d"></stop>
      <stop  offset="50.0%" stop-color="#ffff8c"></stop>
      <stop  offset="62.5%" stop-color="#f9d057"></stop>
      <stop  offset="75.0%" stop-color="#f29e2e"></stop>
      <stop  offset="87.5%" stop-color="#e76818"></stop>
      <stop offset="100.0%" stop-color="#d7191c"></stop>
    </linearGradient>
  </defs>
</svg>
<script src="//d3js.org/d3.v4.min.js"></script>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var zoom = d3.zoom()
    .scaleExtent([1, 40])
    .translateExtent([[-100, -100], [width + 90, height + 100]])
    .on("zoom", zoomed);

var x = d3.scaleLinear()
    .domain([-1, width + 1])
    .range([-1, width + 1]);

var y = d3.scaleLinear()
    .domain([-1, height + 1])
    .range([-1, height + 1]);

var xAxis = d3.axisBottom(x)
    .ticks((width + 2) / (height + 2) * 10)
    .tickSize(height)
    .tickPadding(8 - height);

var yAxis = d3.axisRight(y)
    .ticks(10)
    .tickSize(width)
    .tickPadding(8 - width);

var view = svg.append("rect")
    .attr("class", "view")
    .attr("x", 0.5)
    .attr("y", 0.5)
    .attr("width", width - 1)
    .attr("height", height - 1);

var gX = svg.append("g")
    .attr("class", "axis axis--x")
    .call(xAxis);

var gY = svg.append("g")
    .attr("class", "axis axis--y")
    .call(yAxis);

d3.select("button")
    .on("click", resetted);

svg.call(zoom);

function zoomed() {
  view.attr("transform", d3.event.transform);
  gX.call(xAxis.scale(d3.event.transform.rescaleX(x)));
  gY.call(yAxis.scale(d3.event.transform.rescaleY(y)));
}

function resetted() {
  svg.transition()
      .duration(750)
      .call(zoom.transform, d3.zoomIdentity);
}

</script>

